// Generated by CoffeeScript 1.6.3
var BuildError, Builder, JadeBuilder, amdWrap, async, commonJSWrap, jade, path, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

async = require('async');

jade = require('jade');

_ref = require('./Builder'), Builder = _ref.Builder, BuildError = _ref.BuildError;

amdWrap = function(fn) {
  return "define(['jade'], function(jade) {\n  return " + fn + ";\n});";
};

commonJSWrap = function(fn) {
  return "var jade = require('jade');\nif (jade.runtime) {jade = jade.runtime;}\nmodule.exports = function (locals) {\n  if (locals && jade.helpers) {(locals || (locals = {})).__proto__ = jade.helpers;}\n  return " + fn + ".apply(this, arguments);\n}";
};

module.exports = JadeBuilder = (function(_super) {
  __extends(JadeBuilder, _super);

  JadeBuilder.prototype.reg = /^include (.*)$/gm;

  JadeBuilder.prototype.fileExt = '.jade';

  JadeBuilder.prototype.outExt = '.js';

  function JadeBuilder() {
    JadeBuilder.__super__.constructor.apply(this, arguments);
    this.jadeConfig = this.config.builders.jade;
  }

  JadeBuilder.prototype._build = function(file, code, refresh, cb) {
    var compileOpts, error, tplFn,
      _this = this;
    if (this.deps[file].refreshs.length === 0) {
      try {
        compileOpts = {
          filename: file,
          client: true,
          compileDebug: this.jadeConfig.debug
        };
        tplFn = jade.compile(code, compileOpts).toString();
      } catch (_error) {
        error = _error;
        return cb(new BuildError(file, error));
      }
      switch (this.jadeConfig.wrap) {
        case 'amd':
          tplFn = amdWrap(tplFn);
          break;
        case 'commonJS':
          tplFn = commonJSWrap(tplFn);
      }
      return this.write(tplFn, file, cb);
    } else if (refresh) {
      return async.forEach(this.deps[file].refreshs, function(f, cb) {
        return _this.build(f, refresh, cb);
      }, function(err) {
        if (err) {
          return cb(new BuildError(file, err));
        }
        return cb(null, file, 'Compilation succeeded');
      });
    } else {
      return cb(null, file, 'nothing to build');
    }
  };

  return JadeBuilder;

})(Builder);
