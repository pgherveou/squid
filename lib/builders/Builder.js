// Generated by CoffeeScript 1.5.0
var BuildError, Builder, async, fs, mkdirp, path,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

path = require('path');

fs = require('fs');

mkdirp = require('mkdirp');

async = require('async');

String.prototype.startsWith = function(starts) {
  if (starts === '') {
    return true;
  }
  if (!starts) {
    return false;
  }
  return this.length >= starts.length && this.slice(0, starts.length) === starts;
};

exports.BuildError = BuildError = (function(_super) {

  __extends(BuildError, _super);

  BuildError.prototype.name = 'Build Error';

  function BuildError(file, error) {
    this.file = file;
    this.error = error;
  }

  BuildError.prototype.toString = function() {
    return "Build Error file: " + this.file + "\n\n" + (this.error.toString()) + "\n\n--";
  };

  return BuildError;

})(Error);

exports.Builder = Builder = (function() {

  function Builder(config) {
    this.config = config;
    this.buildPath = __bind(this.buildPath, this);
    this.deps = {};
    this.srcDir = path.resolve(this.config.src);
    this.outDir = path.resolve(this.config.out);
  }

  Builder.prototype.buildPath = function(source, outDir) {
    var dir, ext, fileDir, fileName, mapping, relative, _i, _len, _ref;
    ext = this.outExt || path.extname(source);
    fileName = path.basename(source, path.extname(source)) + this.outExt;
    fileDir = path.dirname(source);
    relative = fileDir.substring(this.srcDir.length);
    if (relative[0] === path.sep) {
      relative = relative.slice(1);
    }
    _ref = this.config.mappings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mapping = _ref[_i];
      if (relative.startsWith(mapping.from)) {
        fileDir = fileDir.replace(mapping.from, mapping.to);
        break;
      }
    }
    dir = outDir + fileDir.substring(this.srcDir.length);
    return path.join(dir, fileName);
  };

  Builder.prototype.write = function(newCode, src, cb) {
    var file,
      _this = this;
    file = this.buildPath(src, this.outDir);
    return fs.readFile(file, 'utf8', function(err, oldCode) {
      if (newCode === oldCode) {
        return cb(null, file, null);
      }
      file = _this.buildPath(src, _this.outDir);
      return mkdirp(path.dirname(file), 0x1ed, function(err) {
        if (err) {
          return cb(new BuildError(file, err));
        }
        return fs.writeFile(file, newCode, function(err) {
          if (err) {
            return cb(new BuildError(file, err));
          }
          _this.refreshScan(file, oldCode, newCode);
          return cb(null, file, newCode);
        });
      });
    });
  };

  Builder.prototype.removeBuild = function(source, cb) {
    return fs.unlink(this.buildPath(source), function(err) {
      return cb(err, source, "");
    });
  };

  Builder.prototype.getImports = function(file, code) {
    var m, _results;
    if (!this.reg) {
      return [];
    }
    _results = [];
    while (m = this.reg.exec(code)) {
      _results.push(path.resolve(path.dirname(file), m[1]) + (path.extname(m[1]) ? '' : this.fileExt));
    }
    return _results;
  };

  Builder.prototype.scan = function(file, code) {
    var _base, _ref,
      _this = this;
    if ((_ref = (_base = this.deps)[file]) == null) {
      _base[file] = {
        imports: [],
        refreshs: []
      };
    }
    this.deps[file].imports = [];
    return this.getImports(file, code).forEach(function(importFile) {
      var _base1, _ref1;
      _this.deps[file].imports.push(importFile);
      if ((_ref1 = (_base1 = _this.deps)[importFile]) == null) {
        _base1[importFile] = {
          imports: [],
          refreshs: []
        };
      }
      if (!~_this.deps[importFile].refreshs.indexOf(file)) {
        return _this.deps[importFile].refreshs.push(file);
      }
    });
  };

  Builder.prototype.refreshScan = function(file, oldCode, newCode) {
    var _this = this;
    this.getImports(file, oldCode).forEach(function(importFile) {
      var refreshs;
      refreshs = _this.deps[importFile].refreshs;
      return delete refreshs[refreshs[indexOf(file)]];
    });
    return this.scan(file, newCode);
  };

  Builder.prototype.build = function(file, refresh, cb) {
    var _this = this;
    return fs.readFile(file, 'utf8', function(err, code) {
      if (err) {
        return cb(new BuildError(file, err));
      }
      _this.scan(file, code);
      return _this._build(file, code, refresh, cb);
    });
  };

  return Builder;

})();
