// Generated by CoffeeScript 1.5.0
var Monitor, argv, builder, codeChange, fs, hrLog, hrLogId, logger, moment, notifier, path, relativeName, root, server, serverScript, spawn, srcMonitor, srvArgs, start, writeStderr, writeStdout, _;

fs = require('fs');

path = require('path');

spawn = require('child_process').spawn;

moment = require('moment');

_ = require('lodash');

argv = require('optimist').alias('d', 'debug').alias('b', 'break').argv;

logger = require('./loggers').get('util');

notifier = require('./loggers').get('notifier');

builder = require('./projectBuilder');

Monitor = require('./finder').Monitor;

server = null;

hrLogId = null;

/*
add an horizontal line after each log to make it easier to read
*/


hrLog = function() {
  var hr, i, _i;
  hr = '';
  for (i = _i = 1; _i <= 50; i = ++_i) {
    hr += '.';
  }
  console.log(hr);
  console.log(moment().format('h:mm:ss - ddd MMM YY'));
  return console.log(hr);
};

writeStdout = function(data) {
  process.stdout.write(data);
  clearTimeout(hrLogId);
  return hrLogId = setTimeout(hrLog, 3000);
};

writeStderr = function(data) {
  process.stderr.write(data);
  clearTimeout(hrLogId);
  return hrLogId = setTimeout(hrLog, 3000);
};

/*
Server stuffs
*/


srvArgs = [];

serverScript = builder.config.server.script;

if (argv.debug) {
  srvArgs.push('--debug');
}

if (argv["break"]) {
  srvArgs.push('--debug-brk');
}

srvArgs.push(path.resolve(__dirname, 'sqmon.js'));

if (fs.existsSync(serverScript)) {
  start = function(msg) {
    if (msg == null) {
      msg = 'Starting';
    }
    notifier.info(msg, {
      title: 'Server'
    });
    server = spawn('node', srvArgs, {
      cwd: '.',
      env: _(process.env).extend(builder.config.server.env, {
        SQ_SCRIPT: serverScript
      })
    });
    server.stdout.on('data', writeStdout);
    server.stderr.on('data', writeStderr);
    return server.once('exit', function(err) {
      if (!err) {
        return start('Restarting');
      }
    });
  };
}

/*
builder stuffs
*/


root = path.resolve('.');

relativeName = function(file) {
  return file != null ? file.substring(root.length) : void 0;
};

codeChange = function(err, file, message) {
  if (err) {
    return notifier.error(err.toString(), {
      title: relativeName(err.file)
    });
  }
  return notifier.info(message, {
    title: relativeName(file) || srcMonitor.name
  });
};

srcMonitor = new Monitor('src Monitor', path.resolve(builder.config.src), builder.config.filter);

srcMonitor.on('created', function(f) {
  if (builder.config.fileFilter(f)) {
    return builder.liveBuild(f, codeChange);
  }
});

srcMonitor.on('changed', function(f) {
  return builder.liveBuild(f, codeChange);
});

srcMonitor.on('removed', function(f) {
  return builder.removeBuild(f, codeChange);
});

srcMonitor.once('started', function(files) {
  if (typeof start === "function") {
    start();
  }
  notifier.info("Watching", {
    title: srcMonitor.name
  });
  return builder.liveBuildAll(files, function(errors) {
    var e, _i, _len, _results;
    if (errors) {
      _results = [];
      for (_i = 0, _len = errors.length; _i < _len; _i++) {
        e = errors[_i];
        _results.push(notifier.error(e.toString(), {
          title: relativeName(e.file)
        }));
      }
      return _results;
    } else {
      return notifier.info('Build done.', {
        title: srcMonitor.name
      });
    }
  });
});

srcMonitor.start();

/*
process stuff
*/


process.on('SIGINT', function(err) {
  if (server) {
    notifier.error('Killing server...');
    server.kill('SIGQUIT');
  }
  return process.exit();
});
