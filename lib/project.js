// Generated by CoffeeScript 1.5.0
var EventEmitter, Project, async, buildFactory, config, fs, logger, path, walk,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require('path');

fs = require('fs');

async = require('async');

EventEmitter = require('events').EventEmitter;

walk = require('findr').walk;

logger = require('./loggers').get('console');

config = require('./config');

buildFactory = {
  '.js': new require('./builders/Js')(config),
  '.coffee': new require('./builders/Coffee')(config),
  '.styl': new require('./builders/Stylus')(config),
  '.jade': new require('./builders/Jade')(config),
  '.json': new require('./builders/Json')(config),
  get: function(file) {
    return this[path.extname(file)];
  }
};

Project = (function(_super) {

  __extends(Project, _super);

  function Project() {
    this.config = config;
  }

  Project.prototype.buildAll = function(opts, cb) {
    var filter,
      _this = this;
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = {};
    }
    cb || (cb = function(errors) {
      var e, _i, _len, _results;
      if (errors) {
        _results = [];
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          e = errors[_i];
          _results.push(logger.error(e.toString()));
        }
        return _results;
      } else {
        return logger.info("Build done.");
      }
    });
    filter = function(f, stat) {
      var _ref;
      if (stat.isDirectory() && (opts.except && (_ref = path.basename(f), __indexOf.call(opts.except, _ref) >= 0))) {
        return false;
      }
      return config.filter(f, stat);
    };
    return walk(config.src, filter, function(err, files) {
      if (err) {
        return logger.error(err);
      }
      return _this.liveBuildAll(files, cb);
    });
  };

  Project.prototype.removeBuild = function(file, cb) {
    return buildFactory.get(file).removeBuild(file, cb);
  };

  Project.prototype.liveBuild = function(src, cb) {
    return buildFactory.get(src).build(src, true, function(err, file, newCode) {
      cb(err, file, newCode);
      if (!err && newCode) {
        return this.emit('file-build');
      }
    });
  };

  Project.prototype.liveBuildAll = function(fileItems, cb) {
    var buildFile, builder, code, errors, file, files, _i, _len;
    files = (function() {
      var _results;
      _results = [];
      for (file in fileItems) {
        _results.push(file);
      }
      return _results;
    })();
    logger.info('scan all ...');
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (builder = buildFactory.get(file)) {
        code = fs.readFileSync(file, 'utf8');
        builder.scan(file, code);
      }
    }
    errors = [];
    buildFile = function(file, cb) {
      builder = buildFactory.get(file);
      if (!builder) {
        return cb(null);
      }
      return builder.build(file, false, function(err) {
        if (err) {
          errors.push(err);
        }
        return cb(null);
      });
    };
    return async.forEach(files, buildFile, function() {
      cb(errors.length ? errors : void 0);
      if (!errors.length) {
        return this.emit('project-build');
      }
    });
  };

  return Project;

})(EventEmitter);

module.exports = new Project;
