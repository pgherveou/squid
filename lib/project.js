// Generated by CoffeeScript 1.6.2
var EventEmitter, Project, async, builders, fs, logger, path, project, walk,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require('path');

fs = require('fs');

async = require('async');

EventEmitter = require('events').EventEmitter;

walk = require('findr').walk;

builders = require('./builders');

logger = require('./loggers').get('console');

Project = (function(_super) {
  __extends(Project, _super);

  function Project() {
    this.liveBuildAll = __bind(this.liveBuildAll, this);
    this.liveBuild = __bind(this.liveBuild, this);
    this.removeBuild = __bind(this.removeBuild, this);
    var Builder, fileReg, regStr, _i, _len,
      _this = this;

    this.config = require('./config');
    regStr = builders.map(function(Builder) {
      return Builder.prototype.fileExt.slice(1);
    }).join('|');
    fileReg = new RegExp("\\.(" + regStr + ")$");
    this.fileFilter = function(f) {
      return fileReg.test(f);
    };
    this.filter = function(f, stat) {
      return stat.isDirectory() || _this.fileFilter(f);
    };
    this.buildFactory = {};
    for (_i = 0, _len = builders.length; _i < _len; _i++) {
      Builder = builders[_i];
      this.buildFactory[Builder.prototype.fileExt] = new Builder(this.config);
    }
    this.buildFactory.get = function(file) {
      return this[path.extname(file)];
    };
  }

  Project.prototype.buildAll = function(opts, cb) {
    var buildFilter,
      _this = this;

    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = {};
    }
    cb || (cb = function(errors) {
      var e, _i, _len, _results;

      if (errors) {
        _results = [];
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          e = errors[_i];
          _results.push(logger.error(e.toString()));
        }
        return _results;
      } else {
        return logger.info("Build done.");
      }
    });
    buildFilter = function(f, stat) {
      var _ref;

      if (stat.isDirectory() && (opts.except && (_ref = path.basename(f), __indexOf.call(opts.except, _ref) >= 0))) {
        return false;
      }
      return _this.filter(f, stat);
    };
    return walk(this.config.src, buildFilter, function(err, files) {
      if (err) {
        return logger.error(err);
      }
      return _this.liveBuildAll(files, cb);
    });
  };

  Project.prototype.removeBuild = function(file, cb) {
    var builder;

    if (!(builder = this.buildFactory.get(file))) {
      return cb(null);
    }
    return builder.removeBuild(file, cb);
  };

  Project.prototype.liveBuild = function(src, cb) {
    var _this = this;

    return this.buildFactory.get(src).build(src, true, function(err, file, newCode) {
      cb(err, file, newCode);
      if (!err && newCode) {
        return _this.emit('build', src);
      }
    });
  };

  Project.prototype.liveBuildAll = function(fileItems, cb) {
    var buildFile, errors, files,
      _this = this;

    files = Object.keys(fileItems);
    errors = [];
    files.forEach(function(file) {
      var builder, code;

      if (builder = _this.buildFactory.get(file)) {
        code = fs.readFileSync(file, 'utf8');
        return builder.scan(file, code);
      }
    });
    buildFile = function(file, cb) {
      var builder;

      if (!(builder = _this.buildFactory.get(file))) {
        return cb(null);
      }
      return fs.stat(builder.buildPath(file), function(err, stat) {
        if (!err && stat.mtime.getTime() > fileItems[file].mtime.getTime()) {
          return cb(null);
        }
        return builder.build(file, false, function(err) {
          if (err) {
            errors.push(err);
          }
          return cb(null);
        });
      });
    };
    return async.forEach(files, buildFile, function() {
      cb(errors.length ? errors : void 0);
      if (!errors.length) {
        return _this.emit('build');
      }
    });
  };

  return Project;

})(EventEmitter);

project = new Project;

require('./middlewares/post-build')(project);

module.exports = project;
