// Generated by CoffeeScript 1.3.1
(function() {
  var events, fs, path, walk, watch, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  events = require('events');

  _ = require('underscore');

  exports.walk = walk = function(dir, filter, fn) {
    var traverse;
    dir = path.resolve(dir);
    if (arguments.length === 2) {
      fn = filter;
      filter = function() {
        return true;
      };
    }
    if (fn.files == null) {
      fn.files = {};
    }
    try {
      fn.files[dir] = fs.statSync(dir);
    } catch (err) {
      fn(err);
    }
    traverse = function(dir) {
      var files;
      try {
        files = fs.readdirSync(dir);
      } catch (err) {
        fn(err);
      }
      return files.forEach(function(filename) {
        var file, stat;
        file = path.join(dir, filename);
        try {
          stat = fs.statSync(file);
        } catch (err) {
          fn(err);
        }
        if (!filter(filename, stat)) {
          return;
        }
        fn.files[file] = stat;
        if (stat.isDirectory()) {
          return traverse(file);
        }
      });
    };
    traverse(dir);
    return fn(null, fn.files);
  };

  exports.watch = watch = function(dir, filter, fn) {
    return walk(dir, filter, function(err, files) {
      var file, watcher;
      if (err) {
        return console.error(err);
      }
      watcher = function(f) {
        return fs.watchFile(f, {
          interval: 50,
          persistent: true
        }, function(curr, prev) {
          if (files[f] && files[f].isFile() && curr.nlink !== 0 && curr.mtime.getTime() === prev.mtime.getTime()) {
            return;
          }
          files[f] = curr;
          if (files[f].isFile()) {
            fn(f, curr, prev);
          } else if (curr.nlink !== 0) {
            fs.readdir(f, function(err, dirFiles) {
              if (err) {
                return console.error("err loading " + f + " : " + err);
              }
              return _(dirFiles).each(function(filename) {
                var file;
                file = path.join(f, filename);
                if (!files[file]) {
                  return fs.stat(file, function(err, stat) {
                    if (err) {
                      return console.error("err loading " + file + " : " + err);
                    }
                    if (filter(file, stat)) {
                      fn(file, stat, null);
                      files[file] = stat;
                      return watcher(file);
                    }
                  });
                }
              });
            });
          }
          if (curr.nlink === 0) {
            delete files[f];
            return fs.unwatchFile(f);
          }
        });
      };
      for (file in files) {
        watcher(file);
      }
      return fn(files, null, null);
    });
  };

  exports.Monitor = (function(_super) {

    __extends(Monitor, _super);

    Monitor.name = 'Monitor';

    function Monitor(name, dir, filter) {
      this.name = name;
      this.dir = dir;
      this.filter = filter;
      this.state = 'stopped';
      this.files = {};
    }

    Monitor.prototype.start = function() {
      var _this = this;
      if (this.state !== 'stopped') {
        return;
      }
      this.state = 'running';
      return watch(this.dir, this.filter, function(f, curr, prev) {
        if (curr === null && prev === null) {
          _(_this.files).extend(f);
          return _this.emit('started', _this.files);
        } else if (prev === null) {
          return _this.emit('created', f, curr, prev);
        } else if (curr.nlink === 0) {
          return _this.emit('removed', f, curr, prev);
        } else {
          return _this.emit('changed', f, curr, prev);
        }
      });
    };

    Monitor.prototype.stop = function() {
      var file;
      if (this.state !== 'running') {
        return;
      }
      this.state = 'stopped';
      for (file in this.files) {
        fs.unwatchFile(file);
      }
      return this.emit('stopped');
    };

    return Monitor;

  })(events.EventEmitter);

}).call(this);
