// Generated by CoffeeScript 1.3.3
(function() {
  var BuildError, Builder, StylusBuilder, async, logger, nib, os, path, stylus, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  os = require('os');

  async = require('async');

  stylus = require('stylus');

  nib = require('nib');

  _ref = require('./Builder'), Builder = _ref.Builder, BuildError = _ref.BuildError;

  logger = require('./loggers').get('util');

  module.exports = StylusBuilder = (function(_super) {

    __extends(StylusBuilder, _super);

    function StylusBuilder() {
      return StylusBuilder.__super__.constructor.apply(this, arguments);
    }

    StylusBuilder.prototype.reg = /^@import "(.*)"$/gm;

    StylusBuilder.prototype.fileExt = ".styl";

    StylusBuilder.prototype._build = function(file, code, refresh, cb) {
      var _this = this;
      if (this.deps[file].refreshs.length === 0) {
        return this._compile(file, code, function(err, css) {
          if (err) {
            return cb(new BuildError(file, err));
          }
          return _this.write(css, _this.buildPath(file, '.css'), cb);
        });
      } else if (refresh) {
        return async.forEach(this.deps[file].refreshs, function(f, cb) {
          return _this.build(f, refresh, cb);
        }, function(err) {
          if (err) {
            return cb(new BuildError(file, err));
          }
          return cb(null, file, 'Compilation succeeded');
        });
      } else {
        return cb(null, file, 'nothing to build');
      }
    };

    StylusBuilder.prototype._compile = function(file, code, cb) {
      return stylus(code).set('fileName', file).set('compress', true).define('env', process.env.NODE_ENV || 'development').define('host', os.hostname()).set('paths', ['public/images', path.dirname(file)]).define('url', stylus.url({
        paths: ['public']
      })).use(nib())["import"]('nib').render(cb);
    };

    return StylusBuilder;

  })(Builder);

}).call(this);
